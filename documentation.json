{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthRepository",
            "id": "interface-AuthRepository-a7269ca312f4b99a5d01098fdaa3609a",
            "file": "src/libs/core/src/domain/repository/AuthRepository.ts",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\nexport interface AuthRepository {\r\n    login: (username, password) => Observable<any>;\r\n}\r\n\r\nexport const AUTH_REPOSITORY = new InjectionToken('AuthRepository');\r\n",
            "properties": [
                {
                    "name": "login",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BasePresenter",
            "id": "interface-BasePresenter-ba45948b8e1366eabdb89b9bc6e7108f",
            "file": "src/libs/core/src/presentation/base.presenter.ts",
            "type": "interface",
            "sourceCode": "export interface BasePresenter{\r\n    /**\r\n     * Bind a component to the presenter\r\n     */\r\n    setView(component: any);\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "setView",
                    "args": [
                        {
                            "name": "component",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "description": "<p>Bind a component to the presenter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-fb8cdb01302d6530e8e2f3c954b350c1",
            "file": "src/libs/core/src/data/net/ApiService.ts",
            "properties": [
                {
                    "name": "_REMOTE_END_POINTS",
                    "defaultValue": "{\r\n        URL_GET_ACCOUNT_PARAMS: `${BASE_ROUTE}auth/login`,\r\n    }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BASE_ROUTE } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\n  export class ApiService {\r\n    public _REMOTE_END_POINTS = {\r\n        URL_GET_ACCOUNT_PARAMS: `${BASE_ROUTE}auth/login`,\r\n    };\r\n  }\r\n",
            "type": "injectable"
        },
        {
            "name": "AuthRepositoryImpl",
            "id": "injectable-AuthRepositoryImpl-1dd40f7ed68916116d707c9bfc583ca6",
            "file": "src/libs/core/src/data/AuthRepositoryImpl.ts",
            "properties": [
                {
                    "name": "_contenttype",
                    "defaultValue": "'content-type'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_headers",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiService } from './net/ApiService';\r\nimport { AuthRepository } from '../domain/repository/AuthRepository';\r\n\r\n@Injectable()\r\nexport class AuthRepositoryImpl implements AuthRepository {\r\n  private _headers = {};\r\n  private _contenttype = 'content-type';\r\n\r\n  constructor(private apiService: ApiService ,private httpClient: HttpClient) { }\r\n\r\n  private setHeaders() {\r\n    this._headers[this._contenttype] = 'application/json';\r\n  }\r\n\r\n  login(\r\n    username: string,\r\n    password: string\r\n  ): Observable<any> {\r\n    const body = {\r\n      username,\r\n      password\r\n    };\r\n    this.setHeaders();\r\n\r\n    return this.httpClient.post<any>(\r\n      this.apiService._REMOTE_END_POINTS.URL_GET_ACCOUNT_PARAMS,\r\n      body,\r\n      {\r\n        headers: this._headers,\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginPresenter",
            "id": "injectable-LoginPresenter-957e9c275561d1a46b024389d892d78e",
            "file": "src/libs/core/src/presentation/presenters/AuthPresenters/login.presenter.ts",
            "properties": [
                {
                    "name": "loginUseCase",
                    "type": "LoginUseCase",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "view",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setView",
                    "args": [
                        {
                            "name": "component",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { LoginPage } from 'src/app/pages/auth/login/login.page';\r\nimport { LoginUseCase } from '../../../domain/usecases/AuthUsesCase/LoginUseCase';\r\nimport { BasePresenter } from '../../base.presenter';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n  })\r\n  export class LoginPresenter implements BasePresenter {\r\n    private view: any;\r\n\r\n    constructor(\r\n      public loginUseCase: LoginUseCase\r\n    ) {}\r\n\r\n\r\n    setView(component: any){\r\n        this.view = component as LoginPage;\r\n    }\r\n\r\n    async login(username: string, password: string): Promise<any> {\r\n        try {\r\n            const response = await this.loginUseCase.login(username, password);\r\n            if (response && response.token) {\r\n                return response;\r\n            } else {\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            console.error('ERROR IN REQUEST LOGIN', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n  }\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loginUseCase",
                        "type": "LoginUseCase"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "loginUseCase",
                        "type": "LoginUseCase",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginUseCase",
            "id": "injectable-LoginUseCase-0e54cb4b4498f97f6a5ffc5427a928af",
            "file": "src/libs/core/src/domain/usecases/AuthUsesCase/LoginUseCase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { AuthRepository, AUTH_REPOSITORY } from '../../repository/AuthRepository';\r\n\r\n@Injectable()\r\nexport class LoginUseCase {\r\n    constructor(\r\n      @Inject(AUTH_REPOSITORY) private authRepository: AuthRepository\r\n    ) { }\r\n\r\n    login(\r\n      username: string,\r\n      password: string\r\n    ): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n        this.authRepository\r\n          .login(username, password)\r\n          .subscribe(resolve, reject);\r\n      });\r\n    }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository"
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepository",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-1854f836777e0a639d55721717bb5bf1",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo() {\r\n    return browser.get('/');\r\n  }\r\n\r\n  getParagraphText() {\r\n    return element(by.deepCss('app-root ion-content')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AuthBase",
            "id": "class-AuthBase-82a0b388d936ace82bbbf0c683385eec",
            "file": "src/app/pages/auth/auth.base.ts",
            "type": "class",
            "sourceCode": "import { ModalController } from \"@ionic/angular\";\r\nimport { LoadingComponent } from \"src/app/utilities/loading/loading.component\";\r\n\r\nexport class AuthBase {\r\n\r\n    constructor(public modalCtrl: ModalController){}\r\n\r\n    async showBaseLodaing() {\r\n        const modal = await this.modalCtrl.create({component: LoadingComponent, backdropDismiss: false});\r\n        modal.present();\r\n    }\r\n\r\n    closeBaseLoading() {\r\n        this.modalCtrl.dismiss()\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "modalCtrl",
                    "type": "ModalController",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeBaseLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "showBaseLodaing",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "VirketColors",
            "id": "class-VirketColors-dd800584fa5f15feddc8485e5932af54",
            "file": "src/libs/utils/values.ts",
            "type": "class",
            "sourceCode": "export class VirketColors {\r\n    primary = '#F47F1F';\r\n    secondary = 'black'\r\n}",
            "properties": [
                {
                    "name": "primary",
                    "defaultValue": "'#F47F1F'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "secondary",
                    "defaultValue": "'black'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9908e841985dd81c608e74e064b23012",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "initializeApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\nimport { Platform } from '@ionic/angular';\r\nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';\r\nimport { StatusBar } from '@ionic-native/status-bar/ngx';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  constructor(\r\n    private platform: Platform,\r\n    private splashScreen: SplashScreen,\r\n    private statusBar: StatusBar\r\n  ) {\r\n    this.initializeApp();\r\n  }\r\n\r\n  initializeApp() {\r\n    this.platform.ready().then(() => {\r\n      this.statusBar.styleDefault();\r\n      this.splashScreen.hide();\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platform",
                        "type": "Platform"
                    },
                    {
                        "name": "splashScreen",
                        "type": "SplashScreen"
                    },
                    {
                        "name": "statusBar",
                        "type": "StatusBar"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "platform",
                        "type": "Platform",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "splashScreen",
                        "type": "SplashScreen",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusBar",
                        "type": "StatusBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ion-app>\r\n  <ion-router-outlet></ion-router-outlet>\r\n</ion-app>\r\n"
        },
        {
            "name": "DetailEventPage",
            "id": "component-DetailEventPage-843ae84d192854f4ae37ad1ab12102b0",
            "file": "src/app/pages/events/detail-event/detail-event.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-detail-event",
            "styleUrls": [
                "./detail-event.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./detail-event.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { helloWorld } from 'src/libs/utils/function';\r\n\r\n@Component({\r\n  selector: 'app-detail-event',\r\n  templateUrl: './detail-event.page.html',\r\n  styleUrls: ['./detail-event.page.scss'],\r\n})\r\nexport class DetailEventPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n\r\n    helloWorld();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./detail-event.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>detail-event</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n\r\n</ion-content>\r\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-f04155744fbf19b08c302dae052163f0",
            "file": "src/app/utilities/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading',\r\n  templateUrl: './loading.component.html',\r\n  styleUrls: ['./loading.component.scss'],\r\n})\r\nexport class LoadingComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".spinner {\r\n    top: 50%;\r\n    margin: 0px auto;\r\n    width: 60px;\r\n    height: 60px;\r\n    position: relative;\r\n    text-align: center;\r\n    background-color: transparent;\r\n\r\n    -webkit-animation: sk-rotate 2.0s infinite linear;\r\n    animation: sk-rotate 2.0s infinite linear;\r\n  }\r\n  \r\n  .dot1, .dot2 {\r\n    width: 60%;\r\n    height: 60%;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 0;\r\n    background-color: #46e6ff;;\r\n    border-radius: 100%;\r\n    \r\n    -webkit-animation: sk-bounce 2.0s infinite ease-in-out;\r\n    animation: sk-bounce 2.0s infinite ease-in-out;\r\n  }\r\n  \r\n  .dot2 {\r\n    top: auto;\r\n    bottom: 0;\r\n    -webkit-animation-delay: -1.0s;\r\n    animation-delay: -1.0s;\r\n  }\r\n  \r\n  @-webkit-keyframes sk-rotate { 100% { -webkit-transform: rotate(360deg) }}\r\n  @keyframes sk-rotate { 100% { transform: rotate(360deg); -webkit-transform: rotate(360deg) }}\r\n  \r\n  @-webkit-keyframes sk-bounce {\r\n    0%, 100% { -webkit-transform: scale(0.0) }\r\n    50% { -webkit-transform: scale(1.0) }\r\n  }\r\n  \r\n  @keyframes sk-bounce {\r\n    0%, 100% { \r\n      transform: scale(0.0);\r\n      -webkit-transform: scale(0.0);\r\n    } 50% { \r\n      transform: scale(1.0);\r\n      -webkit-transform: scale(1.0);\r\n    }\r\n  }",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"spinner\">\r\n  <div class=\"dot1\"></div>\r\n  <div class=\"dot2\"></div>\r\n</div>"
        },
        {
            "name": "LoginPage",
            "id": "component-LoginPage-c27742621930bdf7f59cc9ad97bd4c16",
            "file": "src/app/pages/auth/login/login.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginPresenter",
                    "type": "LoginPresenter",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modalCtrl",
                    "type": "ModalController",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "modalCtrl",
                    "type": "ModalController",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AuthBase"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "closeBaseLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "inheritance": {
                        "file": "AuthBase"
                    }
                },
                {
                    "name": "showBaseLodaing",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "AuthBase"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ModalController } from '@ionic/angular';\r\nimport { LoginPresenter } from 'src/libs/core/src/presentation/presenters/AuthPresenters/login.presenter';\r\nimport { AuthBase } from '../auth.base';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.scss'],\r\n})\r\nexport class LoginPage extends AuthBase implements OnInit {\r\n\r\n  constructor(\r\n    public loginPresenter: LoginPresenter,\r\n    public modalCtrl: ModalController\r\n  ) { \r\n    super(modalCtrl);\r\n    this.loginPresenter.setView(this);\r\n    this.login('hola', 'hola');\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  async login(username, password){\r\n    const response = await this.loginPresenter.login(username, password);\r\n\r\n    if(response) {\r\n      console.log('Welcome');\r\n    } else {\r\n      console.log('ERROR!');\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.h1Text{\r\n    font-family: 'Poppins';\r\n}",
                    "styleUrl": "./login.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "loginPresenter",
                        "type": "LoginPresenter"
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "loginPresenter",
                        "type": "LoginPresenter",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AuthBase",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>login</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n<div style=\"padding: 20px 10%;\">\r\n  <moovi-block-button></moovi-block-button>\r\n  <div style=\"margin: 10px 0 0 0;\"></div>\r\n  <moovi-input></moovi-input>\r\n</div>\r\n</ion-content>\r\n"
        },
        {
            "name": "MooviInputComponent",
            "id": "component-MooviInputComponent-ba1af06cca07dcea18ec05929916ace4",
            "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "moovi-input",
            "styleUrls": [
                "./moovi-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./moovi-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorTitle",
                    "defaultValue": "'primary'",
                    "line": 21
                },
                {
                    "name": "error",
                    "defaultValue": "'not found'",
                    "line": 23
                },
                {
                    "name": "iconResource",
                    "defaultValue": "'checkmark-circle-outline'",
                    "line": 14
                },
                {
                    "name": "sizeTitle",
                    "defaultValue": "'16px'",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "'Escribe tu correo'",
                    "line": 19
                },
                {
                    "name": "titleIs",
                    "defaultValue": "'top'",
                    "line": 18,
                    "type": "\"top\" | \"bottom\""
                },
                {
                    "name": "typeImage",
                    "defaultValue": "'icon'",
                    "line": 15,
                    "type": "\"icon\" | \"asset\" | \"\""
                },
                {
                    "name": "whereIcon",
                    "defaultValue": "'right'",
                    "line": 16,
                    "type": "\"left\" | \"right\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "new VirketColors()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "ICON_LEFT",
                    "defaultValue": "'left'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "leftIcon",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "originalTitleColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "rigthIcon",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sizeInput",
                    "defaultValue": "12",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "haveIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "putColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { VirketColors } from 'src/libs/utils/values';\r\n\r\n@Component({\r\n  selector: 'moovi-input',\r\n  templateUrl: './moovi-input.component.html',\r\n  styleUrls: ['./moovi-input.component.scss'],\r\n})\r\nexport class MooviInputComponent implements OnInit {\r\n\r\n  ICON_LEFT = 'left';\r\n\r\n  // checkmark-circle-outline\r\n  @Input() iconResource = 'checkmark-circle-outline';\r\n  @Input() typeImage: 'icon' | 'asset' | '' = 'icon';\r\n  @Input() whereIcon: 'left' | 'right' = 'right';\r\n\r\n  @Input() titleIs: 'top' | 'bottom' = 'top';\r\n  @Input() title = 'Escribe tu correo'\r\n  @Input() sizeTitle = '16px';\r\n  @Input() colorTitle = 'primary';\r\n\r\n  @Input() error = 'not found'\r\n\r\n  rigthIcon = false;\r\n  leftIcon = false;\r\n\r\n  originalTitleColor: string;\r\n\r\n  sizeInput = 12;\r\n\r\n  color = new VirketColors();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.haveIcon();\r\n    this.putColors();\r\n    \r\n  }\r\n\r\n  putColors() {\r\n    if(this.colorTitle) {\r\n      this.originalTitleColor = this.color[this.colorTitle];\r\n    } else {\r\n      this.originalTitleColor = 'black';\r\n    }\r\n  }\r\n\r\n  haveIcon() {\r\n    \r\n    if (this.iconResource.length != 0 && this.typeImage.length != 0) {\r\n      this.sizeInput = 11;\r\n      if (this.whereIcon == this.ICON_LEFT){\r\n        this.leftIcon = true;\r\n        this.rigthIcon = false;\r\n      } else {\r\n        this.leftIcon = false;\r\n        this.rigthIcon = true;\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\nh1, h2, h3, h4, h5, h6 {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.no-p-m{\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.inputClass {\r\n    width: 99%;\r\n    border: none;\r\n    font-family: 'Poppins-Medium';\r\n    height: 35px;\r\n}\r\n\r\n.iconClass{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 35px;\r\n    font-size: 24px;\r\n}\r\n\r\n.borderInput{\r\n    border-bottom: 1px solid black;\r\n}\r\n\r\n.titleClass{\r\n    font-family: 'Poppins-Medium';\r\n    font-size: 16px;\r\n}\r\n\r\n.errorLabel{\r\n    font-family: 'Poppins-Medium';\r\n    font-size: 10px;\r\n    color: red;\r\n    width: 100%;\r\n    text-align: right;\r\n}\r\n\r\n",
                    "styleUrl": "./moovi-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-grid class=\"no-p-m\">\r\n  <h1 *ngIf=\"titleIs == 'top' && title.lenght != 0\" [ngStyle]=\"{'font-size': sizeTitle, 'color': originalTitleColor}\">{{title}}</h1>\r\n  <ion-row class=\"no-p-m borderInput\">\r\n    <ion-col class=\"no-p-m\" *ngIf=\"leftIcon\" size=\"1\">\r\n      <ion-icon class=\"iconClass\" *ngIf=\"typeImage == 'icon'\" [name]=\"iconResource\"></ion-icon>\r\n      <img class=\"iconClass\" *ngIf=\"typeImage == 'image'\" [src]=\"iconResource\" alt=\"image asset\">\r\n    </ion-col>\r\n    <ion-col class=\"no-p-m\" [size]=\"sizeInput\">\r\n      <input type=\"text\" class=\"inputClass\">\r\n    </ion-col>\r\n    <ion-col class=\"no-p-m\" *ngIf=\"rigthIcon\" size=\"1\">\r\n      <ion-icon class=\"iconClass\" *ngIf=\"typeImage == 'icon'\" [name]=\"iconResource\"></ion-icon>\r\n      <img class=\"iconClass\" *ngIf=\"typeImage == 'image'\" [src]=\"iconResource\" alt=\"image asset\">\r\n    </ion-col>\r\n  </ion-row>\r\n  <ion-row *ngIf=\"error.lenght != 0\" class=\"no-p-m\">\r\n    <h1 class=\"errorLabel\">{{error}}</h1>\r\n  </ion-row>\r\n  <ion-row *ngIf=\"titleIs == 'bottom' && title.lenght != 0\" class=\"no-p-m\">\r\n      <h1 [ngStyle]=\"{'font-size': sizeTitle, 'color': originalTitleColor}\">{{title}}</h1>\r\n  </ion-row>\r\n</ion-grid>\r\n"
        },
        {
            "name": "NewEventPage",
            "id": "component-NewEventPage-43e3a7dd79d9fe32649d7443306a9539",
            "file": "src/app/pages/events/new-event/new-event.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-event",
            "styleUrls": [
                "./new-event.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./new-event.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-new-event',\r\n  templateUrl: './new-event.page.html',\r\n  styleUrls: ['./new-event.page.scss'],\r\n})\r\nexport class NewEventPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./new-event.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>new-event</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n\r\n</ion-content>\r\n"
        },
        {
            "name": "OnboardingPage",
            "id": "component-OnboardingPage-19c22842808959dec108159d1902f784",
            "file": "src/app/pages/auth/onboarding/onboarding.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-onboarding-page",
            "styleUrls": [
                "./onboarding.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./onboarding.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-onboarding-page',\r\n    templateUrl: './onboarding.page.html',\r\n    styleUrls: ['./onboarding.page.scss'],\r\n})\r\nexport class OnboardingPage implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./onboarding.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-content>\r\n    <div class=\"width-100 tx-center\">\r\n        <img class=\"width-45 mar-top-10\" src=\"assets/icon/logo.png\" alt=\"logo app\">\r\n        <img class=\"mar-top-15\" src=\"assets/images/welcome.png\" alt=\"image onboarding\">\r\n\r\n        <div class=\"tx-left padd-l-r-24  mar-top-5 font-poppins-regular\">\r\n            <h1 class=\"text-big padd-0 mar-0 font-bold\">Encuentra los mejores audifonos</h1>\r\n            <h4 class=\"mar-top-18 text-small padd-0 mar-0\">Busca y adquiere los mejores audifonos de las mejores marcas al alcance de tu móvil.</h4>\r\n        </div>\r\n\r\n        <div>\r\n            <virket-button title=\"Comenzar\"></virket-button>\r\n        </div>\r\n\r\n    </div>\r\n</ion-content>"
        },
        {
            "name": "RecoveryPasswordPage",
            "id": "component-RecoveryPasswordPage-a65d6c6194b6806c3f4d7d0863b53bec",
            "file": "src/app/pages/auth/recovery-password/recovery-password.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recovery-password",
            "styleUrls": [
                "./recovery-password.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recovery-password.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-recovery-password',\r\n  templateUrl: './recovery-password.page.html',\r\n  styleUrls: ['./recovery-password.page.scss'],\r\n})\r\nexport class RecoveryPasswordPage implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recovery-password.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-header>\r\n  <ion-toolbar>\r\n    <ion-title>recovery-password</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content>\r\n\r\n</ion-content>\r\n"
        },
        {
            "name": "VirketButtonComponent",
            "id": "component-VirketButtonComponent-37fccfb9f24bce04a674aea3aec91fd1",
            "file": "src/app/components/atomic/atoms/virket-button/virket-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "virket-button",
            "styleUrls": [
                "./virket-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./virket-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgorundColor",
                    "defaultValue": "'primary'",
                    "line": 20
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "isFull",
                    "defaultValue": "true",
                    "line": 22
                },
                {
                    "name": "sizeText",
                    "defaultValue": "'medium'",
                    "line": 16,
                    "type": "\"short\" | \"medium\" | \"large\""
                },
                {
                    "name": "subtitle",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'Click!'",
                    "line": 14
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "new VirketColors()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "putBackground",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sizeSubTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sizeTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "putBackgroundColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { VirketColors } from 'src/libs/utils/values';\r\n\r\n@Component({\r\n  selector: 'virket-button',\r\n  templateUrl: './virket-button.component.html',\r\n  styleUrls: ['./virket-button.component.scss'],\r\n})\r\nexport class VirketButtonComponent implements OnInit {\r\n\r\n  // Add subtitle to button\r\n  @Input() subtitle = '';\r\n  // Add title to button\r\n  @Input() title = 'Click!';\r\n  // Select size text medium, short, large\r\n  @Input() sizeText: 'short' | 'medium' | 'large' = 'medium';\r\n  // turn off button\r\n  @Input() isDisabled = false;\r\n  // Change background color is necesary add color in Utils/values/VirketColors class\r\n  @Input() backgorundColor = 'primary';\r\n  // Is round button or not\r\n  @Input() isFull = true;\r\n\r\n  // call function when click button\r\n  @Output() onClick = new EventEmitter<boolean>();\r\n\r\n  sizeTitle: string;\r\n  sizeSubTitle: string;\r\n  putBackground: string;\r\n\r\n  color = new VirketColors();\r\n\r\n  constructor() { \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.changeSize();\r\n    this.putBackgroundColor();\r\n  }\r\n\r\n  putBackgroundColor() {\r\n    this.backgorundColor = this.color[this.backgorundColor];\r\n  }\r\n\r\n  changeSize(){\r\n    switch (this.sizeText) {\r\n      case 'short':\r\n        this.sizeTitle = '10px';\r\n        this.sizeSubTitle = '5px';\r\n        break;\r\n      case 'medium':\r\n        this.sizeTitle = '15px';\r\n        this.sizeSubTitle = '10px';\r\n        break;\r\n      case 'large':\r\n        this.sizeTitle = '20px';\r\n        this.sizeSubTitle = '15px';\r\n        break;\r\n    }\r\n  }\r\n\r\n  click() {\r\n    if (!this.isDisabled) {\r\n      this.onClick.emit(true);\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1, h2, h3, h4, h5, h6 {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n.buttonDiv{\r\n    padding: 5px 10px;\r\n}\r\n\r\n.borderBlock {\r\n    border-radius: 4px;\r\n}\r\n\r\n.borderRound {\r\n    border-radius: 30px;\r\n}\r\n\r\n.colorsDiv{\r\n    transition: opacity .3s;\r\n}\r\n\r\n.colorsDiv:active {\r\n    opacity: 80% !important;\r\n}\r\n\r\n.h1Style {\r\n    text-align: center;\r\n    color: white;\r\n    font-family: 'Poppins-Medium';\r\n}",
                    "styleUrl": "./virket-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n<div *ngIf=\"!isDisabled; else disabled\" (click)=\"click()\"\r\n  [ngStyle]=\"{'background-color': putBackground}\"\r\n  [ngClass]=\"{'borderBlock': isFull, 'borderRound': !isFull, 'buttonDiv': true, 'colorsDiv': !isDisabled, 'backgorund-color-disabled': isDisabled}\">\r\n  <h1 [ngStyle]=\"{'font-size': sizeTitle}\" class=\"h1Style\">\r\n    {{title}}\r\n    <span [ngStyle]=\"{'font-size': sizeSubTitle}\" *ngIf=\"subtitle\"><br>{{subtitle}}</span>\r\n  </h1>\r\n</div>\r\n\r\n<ng-template #disabled>\r\n  <div (click)=\"click()\"\r\n  [ngClass]=\"{'borderBlock': isFull, 'borderRound': !isFull,'buttonDiv': true, 'colorsDiv': !isDisabled, 'backgorund-color-disabled': isDisabled}\">\r\n  <h1 [ngStyle]=\"{'font-size': sizeTitle}\" class=\"h1Style\">\r\n    {{title}}\r\n    <span [ngStyle]=\"{'font-size': sizeSubTitle}\" *ngIf=\"subtitle\"><br>{{subtitle}}</span>\r\n  </h1>\r\n</div>\r\n</ng-template>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "InjectorModule"
                        },
                        {
                            "name": "UsesCasesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginPage"
                        },
                        {
                            "name": "OnboardingPage"
                        },
                        {
                            "name": "RecoveryPasswordPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DetailEventPage"
                        },
                        {
                            "name": "NewEventPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EventsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InjectorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "UIModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UIModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MooviInputComponent"
                        },
                        {
                            "name": "VirketButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MooviInputComponent"
                        },
                        {
                            "name": "VirketButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsesCasesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LoginUseCase"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginUseCase"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AUTH_REPOSITORY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/core/src/domain/repository/AuthRepository.ts",
                "type": "",
                "defaultValue": "new InjectionToken('AuthRepository')"
            },
            {
                "name": "BASE_ROUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "string",
                "defaultValue": "'www.direction.base.com/'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PlatformLanguageToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/libs/core/core.module.ts",
                "type": "",
                "defaultValue": "new InjectionToken<string>(\r\n    'PlatformLanguageToken'\r\n  )"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "Round",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "Story<MooviInputComponent>",
                "defaultValue": "(args: MooviInputComponent) => ({\r\n    component: MooviInputComponent,\r\n    props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "Story<VirketButtonComponent>",
                "defaultValue": "(args: VirketButtonComponent) => ({\r\n  component: VirketButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TitleBottom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TitleTop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "helloWorld",
                "file": "src/libs/utils/function.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/libs/core/src/domain/repository/AuthRepository.ts": [
                {
                    "name": "AUTH_REPOSITORY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/core/src/domain/repository/AuthRepository.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken('AuthRepository')"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "BASE_ROUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "string",
                    "defaultValue": "'www.direction.base.com/'"
                },
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "Story<MooviInputComponent>",
                    "defaultValue": "(args: MooviInputComponent) => ({\r\n    component: MooviInputComponent,\r\n    props: args,\r\n})"
                },
                {
                    "name": "TitleBottom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TitleTop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithoutIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithoutText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Round",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                    "type": "Story<VirketButtonComponent>",
                    "defaultValue": "(args: VirketButtonComponent) => ({\r\n  component: VirketButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/libs/core/core.module.ts": [
                {
                    "name": "PlatformLanguageToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/libs/core/core.module.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>(\r\n    'PlatformLanguageToken'\r\n  )"
                }
            ]
        },
        "groupedFunctions": {
            "src/libs/utils/function.ts": [
                {
                    "name": "helloWorld",
                    "file": "src/libs/utils/function.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MooviInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TitleBottom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TitleTop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/moovi-input/moovi-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VirketButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Round",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atomic/atoms/virket-button/virket-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/auth.base.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthBase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/login/login.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/onboarding/onboarding.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "OnboardingPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/recovery-password/recovery-password.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecoveryPasswordPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/events/detail-event/detail-event.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailEventPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/events/new-event/new-event.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewEventPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/utilities/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_ROUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PlatformLanguageToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/data/AuthRepositoryImpl.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthRepositoryImpl",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/data/net/ApiService.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/domain/repository/AuthRepository.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/domain/repository/AuthRepository.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_REPOSITORY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/domain/usecases/AuthUsesCase/LoginUseCase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/libs/core/src/presentation/base.presenter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasePresenter",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/libs/core/src/presentation/presenters/AuthPresenters/login.presenter.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginPresenter",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/libs/utils/function.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "helloWorld",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/libs/utils/values.ts",
                "type": "class",
                "linktype": "classe",
                "name": "VirketColors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}